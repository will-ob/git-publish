#!/usr/bin/env bash

version='0.1.0'

repo_root="$(git rev-parse --show-toplevel)"
config_file=$repo_root/.gitpublish

case "$1" in
  "")
    # Exit if .gitpublish does not exist
    if [ ! -f $config_file ];
    then
      echo "Error: .gitpublish does not exist."
      echo "Create one with 'git publish init'"
      exit 1
    fi;

    source $config_file

    build_branch="build-$(date +'%N')"

    # Defaults
    : ${remote:='origin'}
    : ${branch:='gh-pages'}
    : ${export_dir:='./'}

    # build
    $build_cmd || { echo 'Build failed'; exit 1; }

    # checkout new branch
    working_branch="$(git rev-parse --abbrev-ref HEAD)"
    sha=$(git rev-parse HEAD)

    # if there is unsaved work, stash it
    test -n "$(git status --porcelain)" && \
      git stash save --include-untracked && \
      stashed=true

    git checkout --orphan $build_branch

    # add all files in the dist dir to branch at root level
    files="$(ls $export_dir)"

    mv $export_dir/* ./ -b

    git rm -rf .
    for file in $files; do
      git add "$file" -f
      echo "$file"
      if [ -e "$file~" ]; then
        if [ -d "$file" ]; then
          rm -rf "$file"
        else
          rm "$file"
        fi
        mv "$file~" "$file"
      fi
    done

    git commit -m "Built $(date) : $sha"

    # return to working branch
    git checkout $working_branch

    # if there wast unsaved work, restore it
    if $stashed; then git stash pop; fi

    # Note: dont push until working space is restored
    #  as it can take a while and users may sigint
    #  before it completes.

    # push to gh-pages
    git push $remote $build_branch:$branch -f

    git branch -D $build_branch


    exit 0
  ;;
  "--version")
    echo "git-publish version $version"
    exit 0
  ;;
  "init")
    if [ -f $config_file ];
    then
      echo "A .gitpublish file already exists for this directory."
      read -p "Are you sure you want to overwrite it?" -n 1 -r
      if [[ ! $REPLY =~ ^[Yy]$ ]];
      then
        echo 'config aborted'
        exit
      fi
    fi

    # build_cmd
    clear
    echo -e "\e[96mBuild command:\e[0m\n"
    echo -e   "  \e[90mDefault: '':\e[0m"
    echo -e   "  \e[1mExample: grunt build\e[0m"
    echo -ne  "\n  \e[5m$> \e[25m"
    read build_cmd

    # export_dir
    clear
    echo -e "\e[1mUpload folder:\e[0m\n"
    echo -e   "  The folder that should be set as the root of the uploaded branch.\n"
    echo -e   "  \e[33mWarning: This may be different from where the source code is kept.\e[0m"
    echo -e   "  Example: The git-publish build command creates a 'build' directory to upload\e[0m"
    echo -e   "  \e[2mDefault: ./\e[0m"
    echo -ne  "\n  \e[5m$> \e[25m"
    read export_dir

    # remote
    clear
    echo -e "\e[1mGit repository:\e[0m\n"
    echo -e   "  \e[2mDefault: origin\e[0m"
    echo -e   "  Options: $(git remote | tr '\n' ' ')\e[0m"
    echo -ne  "\n  \e[5m$> \e[25m"
    read remote

    # branch
    clear
    echo -e "\e[1mGit branch:\e[0m\n"
    echo -e   "  \e[2mDefault: gh-pages\e[0m"
    echo -ne  "\n  \e[5m$> \e[25m"
    read branch

    if [ -f $config_file ]; then rm $config_file; fi
    touch $config_file

    # Write out .gitpublish
    echo "# Config options found at https://github.com/will-ob/git-publish"    >> $config_file
    if [ "$export_dir" ]; then echo "export_dir=$export_dir"   >> $config_file; fi
    if [ "$branch"     ]; then echo "branch=$branch"           >> $config_file; fi
    if [ "$build_cmd"  ]; then echo "build_cmd=\"$build_cmd\"" >> $config_file; fi
    if [ "$remote"     ]; then echo "remote=$remote"           >> $config_file; fi
    exit 0
  ;;
esac

